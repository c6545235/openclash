# 锚点
pr: &pr {type: select, proxies: [🚀 节点选择, ♻️ SS香港自动, ♻️ Hy2香港自动, ♻️ SS日本自动, ♻️ Hy2日本自动, ♻️ SS美国自动, ♻️ Hy2美国自动, ♻️ SS新加披自动, ♻️ Hy2新加披自动, ♻️ SS台湾自动, ♻️ Hy2台湾自动, ♻️ SS韩国自动, ♻️ Hy2韩国自动, ♻️ 自动选择, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇺🇲 美国节点, 🇸🇬 新加坡, 🇹🇼 台湾, 🇰🇷 韩国, 🌐 全部节点, ⭕ 自建节点, 💫 负载均衡SS, 💫 负载均衡hy2, 🟢 直连]}

# 机场订阅，名称不能重复
proxy-providers:
  Airport_01:
    type: http
    interval: 1800
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 🟢 直连
    url: "http://10.10.10.2:3001/CKg2abstVnOeRpm1aB4G/download/%E5%87%8C%E4%BA%91"
  Airport_02:
    type: http
    interval: 1800
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 🟢 直连
    url: "http://10.10.10.2:3001/CKg2abstVnOeRpm1aB4G/download/Needay"
  Airport_03:
    type: http
    interval: 1800
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 🟢 直连
    url: "http://10.10.10.2:3001/CKg2abstVnOeRpm1aB4G/download/%E8%87%AA%E5%BB%BA"
    
    override:
      skip-cert-verify: true
      udp: true
      down: "1000 Mbps"
      up: "100 Mbps"
      ports: 20000-50000
      
# 用于下载订阅时指定UA
global-ua: clash.meta
    
# 全局配置
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
ipv6: false
allow-lan: true
unified-delay: true
tcp-concurrent: true
# interface-name: eth0  （路由器下根据情况指定出站接口）
authentication:
  - name:passwd
  
geodata-mode: false
# GEO 文件加载模式（standard：标准加载器/memconservative：专为内存受限 (小内存) 设备优化的加载器 (默认值)）
geodata-loader: standard
geo-auto-update: true
geo-update-interval: 24
geox-url:
  geosite: "https://mirror.ghproxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geosite.dat"
  mmdb: "https://mirror.ghproxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geoip-lite.metadb"
  geoip: "https://mirror.ghproxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geoip-lite.dat"
  asn: "https://mirror.ghproxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/GeoLite2-ASN.mmdb"
  
# 控制面板
external-controller: 0.0.0.0:9080
secret: ""
external-ui: ui
external-ui-url: "https://mirror.ghproxy.com/https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip"
# 下载面板地址可更换：https://mirror.ghproxy.com/https://github.com/MetaCubeX/Yacd-meta/archive/gh-pages.zip

# 匹配进程 always/strict/off
find-process-mode: strict
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 30

# 策略组选择和fakeip缓存
profile:
  store-selected: true
  store-fake-ip: true
  
# 流量嗅探
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - +.v2ex.com
  skip-domain:
    - "Mijia Cloud"
    - "dlg.io.mi.com"
    - "+.push.apple.com"
    - "+.apple.com"
    
# 代理模式
tun:
  enable: true
  stack: mixed
  mtu: 9000
  dns-hijack:
    - "any:53"
    - "tcp://any:53"
  auto-route: true
  auto-redirect: true
  auto-detect-interface: true
  
# DNS模块
dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: false
  respect-rules: true
  # 模式切换 redir-host / fake-ip
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  # 模式切换 whitelist/blacklist 
  # 黑名单模式表示如果匹配成功则不返回 Fake-IP, 白名单模式时只有匹配成功才返回 Fake-IP
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    - "+.lan"
    - "+.local"
    - geosite:private
    - geosite:cn
  default-nameserver:
    - 223.5.5.5
    - 119.29.29.29
  proxy-server-nameserver:
    - 223.5.5.5
    - 119.29.29.29
  nameserver:
    - 223.5.5.5
    - 119.29.29.29
  nameserver-policy:
    "rule-set:private_domain,cn_domain":
    - 223.5.5.5
    - 119.29.29.29
    "rule-set:geolocation-!cn":
      - "https://dns.cloudflare.com/dns-query"
      - "https://dns.google/dns-query"
 
   
proxies:
- name: "🟢 直连"
  type: direct
  udp: true

  
# 策略组
proxy-groups:
  - {name: 🚀 节点选择, type: select, proxies: [💫 负载均衡SS, 💫 负载均衡hy2, ♻️ SS香港自动, ♻️ Hy2香港自动, ♻️ SS日本自动, ♻️ Hy2日本自动, ♻️ SS美国自动, ♻️ Hy2美国自动, ♻️ SS新加披自动, ♻️ Hy2新加披自动, ♻️ SS台湾自动, ♻️ Hy2台湾自动, ♻️ SS韩国自动, ♻️ Hy2韩国自动,♻️ 自动选择, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇺🇲 美国节点, 🇸🇬 新加坡, 🇹🇼 台湾, 🇰🇷 韩国, 🌐 全部节点, ⭕ 自建节点, 🟢 直连]}
  - {name: 📹 YouTube, <<: *pr}
  - {name: 🍀 Google, <<: *pr}
  - {name: 🤖 ChatGPT, <<: *pr}
  - {name: 👨🏿‍💻 GitHub, <<: *pr}
  #- {name: 🐬 OneDrive, <<: *pr}
  - {name: 🪟 Microsoft, <<: *pr}
  - {name: 🎵 TikTok, <<: *pr}
  - {name: 📲 Telegram, <<: *pr}
  - {name: 🎥 NETFLIX, type: select, proxies: [🎥️ NETFLIX自动节点, 🎥️ NETFLIX手动节点]}
  - {name: 🍎 Apple, type: select, proxies: [🟢 直连, 🚀 节点选择]}
  - {name: 🎯 全球直连, type: select, proxies: [🟢 直连, 🚀 节点选择]}
  - {name: 🐟 漏网之鱼, <<: *pr}
  - {name: 🎥️ NETFLIX自动节点, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(奈飞|Netflix|NETFLIX|流媒体))^((?!(直连)).)*$"}
  - {name: 🎥️ NETFLIX手动节点, type: select, include-all: true, filter: "(?=.*(奈飞|Netflix|NETFLIX|流媒体))^((?!(直连)).)*$"}
  - {name: ✈️ Speedtest, <<: *pr}
  #- {name: 💶 PayPal, <<: *pr}

  - {name: 💫 负载均衡SS, type: load-balance, strategy: consistent-hashing, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(凌云 香港))"}
  - {name: 💫 负载均衡hy2, type: load-balance, strategy: consistent-hashing, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(Needay 香港))"}
  - {name: ⭕ 自建节点, type: select, include-all: true, filter: "(?i)(chen-yang)"}
  - {name: 🇭🇰 香港节点, type: select, include-all: true, filter: "(?i)港|hk|hongkong|hong kong"}
  - {name: 🇯🇵 日本节点, type: select, include-all: true, filter: "(?i)日|jp|japan"}
  - {name: 🇺🇲 美国节点, type: select, include-all: true, filter: "(?i)美|us|unitedstates|united states"}
  #- {name: 🔯 香港故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$"}
  #- {name: 🔯 日本故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$" }
  - {name: 🇸🇬 新加坡, type: select, include-all: true, filter: "(?i)新|sg"}
  - {name: 🇹🇼 台湾, type: select, include-all: true, filter: "(?i)台|tw"}
  - {name: 🇰🇷 韩国, type: select, include-all: true, filter: "(?i)韩|kr"}
  - {name: ♻️ SS香港自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(凌云 香港))"}
  - {name: ♻️ Hy2香港自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(Needay 香港))"}
  - {name: ♻️ SS日本自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(凌云 日本))"}
  - {name: ♻️ Hy2日本自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(Needay 日本))"}
  - {name: ♻️ SS美国自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(凌云 美国))"}
  - {name: ♻️ Hy2美国自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(Needay 美国))"}
  - {name: ♻️ SS新加披自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(凌云 新加披))"}
  - {name: ♻️ Hy2新加披自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(Needay 新加披))"}
  - {name: ♻️ SS台湾自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(凌云 台湾))"}
  - {name: ♻️ Hy2台湾自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(Needay 台湾))"}
  - {name: ♻️ SS韩国自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(凌云 韩国))"}
  - {name: ♻️ Hy2韩国自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(Needay 韩国))"}

  - {name: ♻️ 自动选择, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "^((?!(直连)).)*$"}
  - {name: 🌐 全部节点, type: select, include-all: true}
  
  
rules:
#正在使用
  - RULE-SET,direct1,🟢 直连
  - RULE-SET,apple_domain,🍎 Apple
  - RULE-SET,proxylite,🚀 节点选择
  - RULE-SET,ai,🤖 ChatGPT
  - RULE-SET,telegram_domain,📲 Telegram
  - RULE-SET,speedtest_domain,✈️ Speedtest
  - RULE-SET,github_domain,👨🏿‍💻 GitHub
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,google_domain,🍀 Google
  - RULE-SET,microsoft_domain,🪟 Microsoft
  - RULE-SET,tiktok_domain,🎵 TikTok
  - RULE-SET,netflix_domain,🎥 NETFLIX
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,google_ip,🍀 Google,no-resolve
  - RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve
  - RULE-SET, gfw_domain,🚀 节点选择
  - RULE-SET,geolocation-!cn,🚀 节点选择
  - RULE-SET,LocalAreaNetwork,🟢 直连
  - RULE-SET,Download,🟢 直连
  - RULE-SET,private_domain,🟢 直连
  - RULE-SET,LocalAreaNetwork,🟢 直连
  - RULE-SET,Download,🟢 直连
  - RULE-SET,cn_domain,🎯 全球直连
  - RULE-SET,cn_ip,🎯 全球直连
  - MATCH,🐟 漏网之鱼
#备份 不在使用
  #- RULE-SET,free,🔗 链式代理
  #- RULE-SET,onedrive_domain,🐬 OneDrive
  
  
  #- RULE-SET,paypal_domain,💶 PayPal

  
  
  
  
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  qcy: &qcy {type: http, interval: 86400, behavior: domain, format: text}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}

rule-providers: 
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs" }
  direct1: { <<: *class, url: "https://raw.githubusercontent.com/c6545235/openclash/refs/heads/main/Direct.list" }
  proxylite: { <<: *qcy, url: "https://raw.githubusercontent.com/c6545235/openclash/refs/heads/main/ProxyLite.list" }
  ai: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/category-ai-chat-!cn.mrs" }
 
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs" }
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs" }
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs" }
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs" }
  netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs" }
  paypal_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs" }
  #onedrive_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs" }
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs" }
  apple_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs" }
  speedtest_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs" }
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs" }
  gfw_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs" }
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs" }
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs" }
  LocalAreaNetwork: { <<: *qcy, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/LocalAreaNetwork.list" }
  Download: { <<: *qcy, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Download.list" }
  
  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs" }
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs" }
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs" }
  netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs" }
