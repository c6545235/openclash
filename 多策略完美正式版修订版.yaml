# 锚点
pr:
  &pr {
    type: select,
    proxies:
      [
        节点选择,
        SS香港自动,
        Hy2香港自动,
        SS日本自动,
        Hy2日本自动,
        SS美国自动,
        Hy2美国自动,
        SS新加披自动,
        SS新加披自动,
        Hy2新加披自动,
        SS台湾自动,
        Hy2台湾自动,
        SS韩国自动,
        Hy2韩国自动,
        自动选择,
        香港节点,
        日本节点,
        美国节点,
        新加坡,
        台湾,
        韩国,
        全部节点,
        自建节点,
        负载均衡SS,
        负载均衡hy2,
      ],
  }
# 延迟检测 URL
p: &p
  type: http
  # 自动更新订阅时间，单位为秒
  interval: 3600
  health-check:
    enable: true
    url: https://cp.cloudflare.com
    # 节点连通性检测时间，单位为秒
    interval: 300
    # 节点超时延迟，单位为毫秒
    timeout: 1000
    # 节点自动切换差值，单位为毫秒
    tolerance: 100

# 基础配置
# --------------------------------------------------
# 如果你是小白，那么你只需要修改分割线以内的内容
# 其他部分保持不动即可
# 如果你需要使用大于两个机场，在下方 `use` 处添加 `订阅三` （名字可以自己取），然后在 `proxy-providers` 照例添加订阅链接即可
# 反之，如果你只需要使用一个，那么将 `订阅二` 前添加 `#` 进行注释即可

# 订阅名，记得修改成自己的
# 添删订阅在这里和下方订阅链接依葫芦画瓢就行
#use: &use
  # 如果不希望自动切换请将下面两行注释对调
  # type: select
  #type: url-test
 # use:
   # - 订阅一
   # - 订阅二
    # - 本地配置

# 订阅链接
# 对于订阅来说，path 为选填项，但建议启用
# 本地配置可以只填 path

proxy-providers:
  订阅一:
    <<: *p
    # path: ./proxy_provider/订阅一.yaml
    url: "http://10.10.10.2:3001/CKg2abstVnOeRpm1aB4G/download/%E5%87%8C%E4%BA%91"

  订阅二:
    <<: *p
    # path: ./proxy_provider/订阅二.yaml
    url: "http://10.10.10.2:3001/CKg2abstVnOeRpm1aB4G/download/Needay"

  订阅三:
    <<: *p
    # path: ./proxy_provider/订阅二.yaml
    url: "http://10.10.10.2:3001/CKg2abstVnOeRpm1aB4G/download/%E8%87%AA%E5%BB%BA"    
    
    

  # 本地配置:
    # <<: *p
    # path: ./proxy_provider/本地配置.yaml

#hy2需要  
override:
  skip-cert-verify: true
  udp: true
  down: "1000 Mbps"
  up: "100 Mbps"
  ports: 20000-50000
      


# 用于下载订阅时指定UA
global-ua: clash.meta
    
# 全局配置
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
ipv6: false
allow-lan: true
unified-delay: true
tcp-concurrent: true
# interface-name: eth0  （路由器下根据情况指定出站接口）
authentication:
  - name:passwd
  
geodata-mode: false
# GEO 文件加载模式（standard：标准加载器/memconservative：专为内存受限 (小内存) 设备优化的加载器 (默认值)）
geodata-loader: standard
geo-auto-update: true
geo-update-interval: 24
geox-url:
  geosite: "https://mirror.ghproxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geosite.dat"
  mmdb: "https://mirror.ghproxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geoip-lite.metadb"
  geoip: "https://mirror.ghproxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geoip-lite.dat"
  asn: "https://mirror.ghproxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/GeoLite2-ASN.mmdb"
  
# 控制面板
external-controller: 0.0.0.0:9080
secret: ""
external-ui: ui
external-ui-url: "https://mirror.ghproxy.com/https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip"
# 下载面板地址可更换：https://mirror.ghproxy.com/https://github.com/MetaCubeX/Yacd-meta/archive/gh-pages.zip

# 匹配进程 always/strict/off
find-process-mode: strict
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 30

# 策略组选择和fakeip缓存
profile:
  store-selected: true
  store-fake-ip: true
  
# 流量嗅探
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - +.v2ex.com
  skip-domain:
    - "Mijia Cloud"
    - "dlg.io.mi.com"
    - "+.push.apple.com"
    - "+.apple.com"
    
# 代理模式
tun:
  enable: true
  stack: mixed
  mtu: 9000
  dns-hijack:
    - "any:53"
    - "tcp://any:53"
  auto-route: true
  auto-redirect: true
  auto-detect-interface: true
  
# DNS模块
dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: false
  respect-rules: true
  # 模式切换 redir-host / fake-ip
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  # 模式切换 whitelist/blacklist 
  # 黑名单模式表示如果匹配成功则不返回 Fake-IP, 白名单模式时只有匹配成功才返回 Fake-IP
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    - "+.lan"
    - "+.local"
    - geosite:private
    - geosite:cn
  default-nameserver:
    - 223.5.5.5
    - 119.29.29.29
  proxy-server-nameserver:
    - 223.5.5.5
    - 119.29.29.29
  nameserver:
    - 223.5.5.5
    - 119.29.29.29
  nameserver-policy:
    "rule-set:private_domain,cn_domain":
    - 223.5.5.5
    - 119.29.29.29
    "rule-set:geolocation-!cn":
      - "https://dns.cloudflare.com/dns-query"
      - "https://dns.google/dns-query"
    

 
   
proxies:
- name: "🟢 直连"
  type: direct
  udp: true

  
# 策略组
proxy-groups:
  - {name: 节点选择, type: select, icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/Server.png, proxies: [负载均衡SS, 负载均衡hy2, SS香港自动, Hy2香港自动, SS日本自动, Hy2日本自动, SS美国自动, Hy2美国自动, SS新加披自动, Hy2新加披自动, SS台湾自动, Hy2台湾自动, SS韩国自动, Hy2韩国自动, 自动选择, 香港节点, 日本节点, 美国节点, 新加坡, 台湾, 韩国, 全部节点, 自建节点]}
  - {name: YouTube, icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/YouTube.png, <<: *pr}
  - {name: Google, icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/Google.png, <<: *pr}
  - {name: ChatGPT, icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/AI.png, <<: *pr}
  - {name: GitHub, icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/GitHub.png, <<: *pr}
  #- {name: 🐬 OneDrive, <<: *pr}
  - {name: Microsoft, icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/Microsoft_365.png, <<: *pr}
  - {name: TikTok, icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/TikTok.png, <<: *pr}
  - {name: Telegram, icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/Telegram.png, <<: *pr}
  - {name: NETFLIX, type: select, icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/Netflix.png, proxies: [NETFLIX自动节点, NETFLIX手动节点]}
  - {name: Apple, type: select, icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/Apple_black.png, proxies: [全球直连, 节点选择]}
  - {name: 全球直连, type: select, icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/Global.png, proxies: [🟢 直连, 节点选择]}
  - {name: 漏网之鱼, icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/Fish.png, <<: *pr}
  - {name: NETFLIX自动节点, type: url-test, include-all: true, tolerance: 20, interval: 300, icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/Netflix.png, filter: "(?=.*(奈飞|Netflix|NETFLIX|流媒体))^((?!(🟢 直连)).)*$"}
  - {name: NETFLIX手动节点, type: select, include-all: true, icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/Netflix.png, filter: "(?=.*(奈飞|Netflix|NETFLIX|流媒体))^((?!(🟢 直连)).)*$"}
  - {name: Speedtest, icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/SpeedTest.png, <<: *pr}
  #- {name: 💶 PayPal, <<: *pr}

  - {name: 负载均衡SS, type: load-balance, strategy: consistent-hashing, include-all: true, tolerance: 20, interval: 300, icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/Load_balancing_2.png, filter: "(?=.*(凌云 香港))"}
  - {name: 负载均衡hy2, type: load-balance, strategy: consistent-hashing, include-all: true, tolerance: 20, interval: 300, icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/Load_balancing_2.png, filter: "(?=.*(Needay 香港))"}
  - {name: 自建节点, type: select, include-all: true, icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/Reddit.png, filter: "(?i)(chen-yang)"}
  - {name: 香港节点, type: select, include-all: true, icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/Hong_Kong.png, filter: "(?i)港|hk|hongkong|hong kong"}
  - {name: 日本节点, type: select, include-all: true, icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/Japan.png, filter: "(?i)日|jp|japan"}
  - {name: 美国节点, type: select, include-all: true, icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/USA.png, filter: "(?i)美|us|unitedstates|united states"}
  #- {name: 🔯 香港故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$"}
  #- {name: 🔯 日本故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$" }
  - {name: 新加坡, type: select, include-all: true, icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/Singapore.png, filter: "(?i)新|sg"}
  - {name: 台湾, type: select, include-all: true, icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/Taiwan_Province.png, filter: "(?i)台|tw"}
  - {name: 韩国, type: select, include-all: true, icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/South_Korea.png, filter: "(?i)韩|kr"}
  - {name: SS香港自动, type: url-test, include-all: true, tolerance: 20, interval: 300, icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/Transfer.png, filter: "(?=.*(凌云 香港))"}
  - {name: Hy2香港自动, type: url-test, include-all: true, tolerance: 20, interval: 300, icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/Transfer.png, filter: "(?=.*(Needay 香港))"}
  - {name: SS日本自动, type: url-test, include-all: true, tolerance: 20, interval: 300, icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/Transfer.png, filter: "(?=.*(凌云 日本))"}
  - {name: Hy2日本自动, type: url-test, include-all: true, tolerance: 20, interval: 300, icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/Transfer.png, filter: "(?=.*(Needay 日本))"}
  - {name: SS美国自动, type: url-test, include-all: true, tolerance: 20, interval: 300, icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/Transfer.png, filter: "(?=.*(凌云 美国))"}
  - {name: Hy2美国自动, type: url-test, include-all: true, tolerance: 20, interval: 300, icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/Transfer.png, filter: "(?=.*(Needay 美国))"}
  - {name: SS新加披自动, type: url-test, include-all: true, tolerance: 20, interval: 300, icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/Transfer.png, filter: "(?=.*(凌云 新加披))"}
  - {name: Hy2新加披自动, type: url-test, include-all: true, tolerance: 20, interval: 300, icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/Transfer.png, filter: "(?=.*(Needay 新加披))"}
  - {name: SS台湾自动, type: url-test, include-all: true, tolerance: 20, interval: 300, icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/Transfer.png, filter: "(?=.*(凌云 台湾))"}
  - {name: Hy2台湾自动, type: url-test, include-all: true, tolerance: 20, interval: 300, icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/Transfer.png, filter: "(?=.*(Needay 台湾))"}
  - {name: SS韩国自动, type: url-test, include-all: true, tolerance: 20, interval: 300, icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/Transfer.png, filter: "(?=.*(凌云 韩国))"}
  - {name: Hy2韩国自动, type: url-test, include-all: true, tolerance: 20, interval: 300, icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/Transfer.png, filter: "(?=.*(Needay 韩国))"}

  - {name: 自动选择, type: url-test, include-all: true, tolerance: 20, interval: 300, icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/Transfer.png, filter: "^((?!(🟢 直连)).)*$"}
  - {name: 全部节点, type: select, include-all: true ,icon: https://mirror.ghproxy.com/https://github.com/Vbaethon/HOMOMIX/blob/main/Icon/Color/Large/Home.png}
  
  
rules:
  - RULE-SET,private_domain,🟢 直连 
  - RULE-SET,direct1,🟢 直连 
  - RULE-SET,proxylite,节点选择 
  - RULE-SET,AppleProxy,全球直连
  - RULE-SET,apple_domain,🟢 直连
  - RULE-SET,ai,ChatGPT
  - RULE-SET,youtube_domain,YouTube
  - RULE-SET,google_domain,Google
  - RULE-SET,google_ip,Google
  - RULE-SET,netflix_domain,NETFLIX
  - RULE-SET,netflix_ip,NETFLIX
  - RULE-SET,telegram_domain,Telegram
  - RULE-SET,telegram_ip,Telegram
  - RULE-SET,github_domain,GitHub
  - RULE-SET,microsoft_domain,Microsoft
  - RULE-SET,geolocation-!cn,节点选择
  - RULE-SET,cn_domain,🟢 直连
  - RULE-SET,cn_ip,🟢 直连
  - MATCH,漏网之鱼
  
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  qcy: &qcy {type: http, interval: 86400, behavior: domain, format: text}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}

rule-providers: 
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs" }
  direct1: { <<: *class, url: "https://raw.githubusercontent.com/c6545235/openclash/refs/heads/main/Direct.list" }
  proxylite: { <<: *qcy, url: "https://raw.githubusercontent.com/c6545235/openclash/refs/heads/main/ProxyLite.list" }
  ai: { <<: *qcy, url: "https://raw.githubusercontent.com/c6545235/openclash/refs/heads/main/AI.list" }
  AppleProxy: { <<: *qcy, url: "https://raw.githubusercontent.com/Repcz/Tool/refs/heads/X/Surge/Rules/AppleProxy.list" }
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs" }
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs" }
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs" }
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs" }
  netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs" }
  paypal_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs" }
  #onedrive_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs" }
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs" }
  apple_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs" }
  speedtest_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs" }
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs" }
  gfw_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs" }
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs" }
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs" }
  LocalAreaNetwork: { <<: *qcy, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/LocalAreaNetwork.list" }
  Download: { <<: *qcy, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Download.list" }
  
  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs" }
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs" }
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs" }
  netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs" }
